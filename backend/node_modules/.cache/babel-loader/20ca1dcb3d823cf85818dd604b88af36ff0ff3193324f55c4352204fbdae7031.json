{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _d3Shape = require(\"d3-shape\");\nvar _stackSeries = require(\"../internals/stackSeries\");\nvar _defaultizeValueFormatter = _interopRequireDefault(require(\"../internals/defaultizeValueFormatter\"));\nlet warnedOnce = false;\n\n// For now it's a copy past of bar charts formatter, but maybe will diverge later\nconst formatter = (params, dataset) => {\n  const {\n    seriesOrder,\n    series\n  } = params;\n  const stackingGroups = (0, _stackSeries.getStackingGroups)((0, _extends2.default)({}, params, {\n    defaultStrategy: {\n      stackOffset: 'none'\n    }\n  }));\n\n  // Create a data set with format adapted to d3\n  const d3Dataset = dataset ?? [];\n  seriesOrder.forEach(id => {\n    const data = series[id].data;\n    if (data !== undefined) {\n      data.forEach((value, index) => {\n        if (d3Dataset.length <= index) {\n          d3Dataset.push({\n            [id]: value\n          });\n        } else {\n          d3Dataset[index][id] = value;\n        }\n      });\n    } else if (dataset === undefined && process.env.NODE_ENV !== 'production') {\n      throw new Error([`MUI X Charts: line series with id='${id}' has no data.`, 'Either provide a data property to the series or use the dataset prop.'].join('\\n'));\n    }\n  });\n  const completedSeries = {};\n  stackingGroups.forEach(stackingGroup => {\n    // Get stacked values, and derive the domain\n    const {\n      ids,\n      stackingOrder,\n      stackingOffset\n    } = stackingGroup;\n    const stackedSeries = (0, _d3Shape.stack)().keys(ids.map(id => {\n      // Use dataKey if needed and available\n      const dataKey = series[id].dataKey;\n      return series[id].data === undefined && dataKey !== undefined ? dataKey : id;\n    })).value((d, key) => d[key] ?? 0) // defaultize null value to 0\n    .order(stackingOrder).offset(stackingOffset)(d3Dataset);\n    ids.forEach((id, index) => {\n      const dataKey = series[id].dataKey;\n      completedSeries[id] = (0, _extends2.default)({}, series[id], {\n        data: dataKey ? dataset.map(data => {\n          const value = data[dataKey];\n          if (typeof value !== 'number') {\n            if (process.env.NODE_ENV !== 'production' && !warnedOnce && value !== null) {\n              warnedOnce = true;\n              console.error([`MUI-X charts: your dataset key \"${dataKey}\" is used for plotting line, but contains nonnumerical elements.`, 'Line plots only support numbers and null values.']);\n            }\n            return null;\n          }\n          return value;\n        }) : series[id].data,\n        stackedData: stackedSeries[index].map(([a, b]) => [a, b])\n      });\n    });\n  });\n  return {\n    seriesOrder,\n    stackingGroups,\n    series: (0, _defaultizeValueFormatter.default)(completedSeries, v => v == null ? '' : v.toLocaleString())\n  };\n};\nvar _default = exports.default = formatter;","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_extends2","_d3Shape","_stackSeries","_defaultizeValueFormatter","warnedOnce","formatter","params","dataset","seriesOrder","series","stackingGroups","getStackingGroups","defaultStrategy","stackOffset","d3Dataset","forEach","id","data","undefined","index","length","push","process","env","NODE_ENV","Error","join","completedSeries","stackingGroup","ids","stackingOrder","stackingOffset","stackedSeries","stack","keys","map","dataKey","d","key","order","offset","console","error","stackedData","a","b","v","toLocaleString","_default"],"sources":["D:/Visualization Dashboard/my-app/node_modules/@mui/x-charts/LineChart/formatter.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _d3Shape = require(\"d3-shape\");\nvar _stackSeries = require(\"../internals/stackSeries\");\nvar _defaultizeValueFormatter = _interopRequireDefault(require(\"../internals/defaultizeValueFormatter\"));\nlet warnedOnce = false;\n\n// For now it's a copy past of bar charts formatter, but maybe will diverge later\nconst formatter = (params, dataset) => {\n  const {\n    seriesOrder,\n    series\n  } = params;\n  const stackingGroups = (0, _stackSeries.getStackingGroups)((0, _extends2.default)({}, params, {\n    defaultStrategy: {\n      stackOffset: 'none'\n    }\n  }));\n\n  // Create a data set with format adapted to d3\n  const d3Dataset = dataset ?? [];\n  seriesOrder.forEach(id => {\n    const data = series[id].data;\n    if (data !== undefined) {\n      data.forEach((value, index) => {\n        if (d3Dataset.length <= index) {\n          d3Dataset.push({\n            [id]: value\n          });\n        } else {\n          d3Dataset[index][id] = value;\n        }\n      });\n    } else if (dataset === undefined && process.env.NODE_ENV !== 'production') {\n      throw new Error([`MUI X Charts: line series with id='${id}' has no data.`, 'Either provide a data property to the series or use the dataset prop.'].join('\\n'));\n    }\n  });\n  const completedSeries = {};\n  stackingGroups.forEach(stackingGroup => {\n    // Get stacked values, and derive the domain\n    const {\n      ids,\n      stackingOrder,\n      stackingOffset\n    } = stackingGroup;\n    const stackedSeries = (0, _d3Shape.stack)().keys(ids.map(id => {\n      // Use dataKey if needed and available\n      const dataKey = series[id].dataKey;\n      return series[id].data === undefined && dataKey !== undefined ? dataKey : id;\n    })).value((d, key) => d[key] ?? 0) // defaultize null value to 0\n    .order(stackingOrder).offset(stackingOffset)(d3Dataset);\n    ids.forEach((id, index) => {\n      const dataKey = series[id].dataKey;\n      completedSeries[id] = (0, _extends2.default)({}, series[id], {\n        data: dataKey ? dataset.map(data => {\n          const value = data[dataKey];\n          if (typeof value !== 'number') {\n            if (process.env.NODE_ENV !== 'production' && !warnedOnce && value !== null) {\n              warnedOnce = true;\n              console.error([`MUI-X charts: your dataset key \"${dataKey}\" is used for plotting line, but contains nonnumerical elements.`, 'Line plots only support numbers and null values.']);\n            }\n            return null;\n          }\n          return value;\n        }) : series[id].data,\n        stackedData: stackedSeries[index].map(([a, b]) => [a, b])\n      });\n    });\n  });\n  return {\n    seriesOrder,\n    stackingGroups,\n    series: (0, _defaultizeValueFormatter.default)(completedSeries, v => v == null ? '' : v.toLocaleString())\n  };\n};\nvar _default = exports.default = formatter;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}