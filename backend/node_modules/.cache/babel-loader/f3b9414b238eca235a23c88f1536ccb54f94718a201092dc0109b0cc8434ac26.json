{"ast":null,"code":"import { DEFAULT_X_AXIS_KEY, DEFAULT_Y_AXIS_KEY } from '../constants';\nimport { isBandScaleConfig, isPointScaleConfig } from '../models/axis';\nconst getAxisMessage = (axisDirection, axisKey) => {\n  const axisName = `${axisDirection}-axis`;\n  const axisKeyName = `${axisDirection}Axis`;\n  const axisDefaultKey = axisDirection === 'x' ? DEFAULT_X_AXIS_KEY : DEFAULT_Y_AXIS_KEY;\n  return axisKey === axisDefaultKey ? `The first \\`${axisKeyName}\\`` : `The ${axisName} with id \"${axisKey}\"`;\n};\nexport function checkScaleErrors(verticalLayout, seriesId, xAxisKey, xAxis, yAxisKey, yAxis) {\n  const xAxisConfig = xAxis[xAxisKey];\n  const yAxisConfig = yAxis[yAxisKey];\n  const discreteAxisConfig = verticalLayout ? xAxisConfig : yAxisConfig;\n  const continuousAxisConfig = verticalLayout ? yAxisConfig : xAxisConfig;\n  const discreteAxisKey = verticalLayout ? xAxisKey : yAxisKey;\n  const continuousAxisKey = verticalLayout ? yAxisKey : xAxisKey;\n  const discreteAxisDirection = verticalLayout ? 'x' : 'y';\n  const continuousAxisDirection = verticalLayout ? 'y' : 'x';\n  if (!isBandScaleConfig(discreteAxisConfig)) {\n    throw new Error(`MUI X Charts: ${getAxisMessage(discreteAxisDirection, discreteAxisKey)} should be of type \"band\" to display the bar series of id \"${seriesId}\".`);\n  }\n  if (discreteAxisConfig.data === undefined) {\n    throw new Error(`MUI X Charts: ${getAxisMessage(discreteAxisDirection, discreteAxisKey)} should have data property.`);\n  }\n  if (isBandScaleConfig(continuousAxisConfig) || isPointScaleConfig(continuousAxisConfig)) {\n    throw new Error(`MUI X Charts: ${getAxisMessage(continuousAxisDirection, continuousAxisKey)} should be a continuous type to display the bar series of id \"${seriesId}\".`);\n  }\n}","map":{"version":3,"names":["DEFAULT_X_AXIS_KEY","DEFAULT_Y_AXIS_KEY","isBandScaleConfig","isPointScaleConfig","getAxisMessage","axisDirection","axisKey","axisName","axisKeyName","axisDefaultKey","checkScaleErrors","verticalLayout","seriesId","xAxisKey","xAxis","yAxisKey","yAxis","xAxisConfig","yAxisConfig","discreteAxisConfig","continuousAxisConfig","discreteAxisKey","continuousAxisKey","discreteAxisDirection","continuousAxisDirection","Error","data","undefined"],"sources":["D:/Visualization Dashboard/my-app/node_modules/@mui/x-charts/esm/BarChart/checkScaleErrors.js"],"sourcesContent":["import { DEFAULT_X_AXIS_KEY, DEFAULT_Y_AXIS_KEY } from '../constants';\nimport { isBandScaleConfig, isPointScaleConfig } from '../models/axis';\nconst getAxisMessage = (axisDirection, axisKey) => {\n  const axisName = `${axisDirection}-axis`;\n  const axisKeyName = `${axisDirection}Axis`;\n  const axisDefaultKey = axisDirection === 'x' ? DEFAULT_X_AXIS_KEY : DEFAULT_Y_AXIS_KEY;\n  return axisKey === axisDefaultKey ? `The first \\`${axisKeyName}\\`` : `The ${axisName} with id \"${axisKey}\"`;\n};\nexport function checkScaleErrors(verticalLayout, seriesId, xAxisKey, xAxis, yAxisKey, yAxis) {\n  const xAxisConfig = xAxis[xAxisKey];\n  const yAxisConfig = yAxis[yAxisKey];\n  const discreteAxisConfig = verticalLayout ? xAxisConfig : yAxisConfig;\n  const continuousAxisConfig = verticalLayout ? yAxisConfig : xAxisConfig;\n  const discreteAxisKey = verticalLayout ? xAxisKey : yAxisKey;\n  const continuousAxisKey = verticalLayout ? yAxisKey : xAxisKey;\n  const discreteAxisDirection = verticalLayout ? 'x' : 'y';\n  const continuousAxisDirection = verticalLayout ? 'y' : 'x';\n  if (!isBandScaleConfig(discreteAxisConfig)) {\n    throw new Error(`MUI X Charts: ${getAxisMessage(discreteAxisDirection, discreteAxisKey)} should be of type \"band\" to display the bar series of id \"${seriesId}\".`);\n  }\n  if (discreteAxisConfig.data === undefined) {\n    throw new Error(`MUI X Charts: ${getAxisMessage(discreteAxisDirection, discreteAxisKey)} should have data property.`);\n  }\n  if (isBandScaleConfig(continuousAxisConfig) || isPointScaleConfig(continuousAxisConfig)) {\n    throw new Error(`MUI X Charts: ${getAxisMessage(continuousAxisDirection, continuousAxisKey)} should be a continuous type to display the bar series of id \"${seriesId}\".`);\n  }\n}"],"mappings":"AAAA,SAASA,kBAAkB,EAAEC,kBAAkB,QAAQ,cAAc;AACrE,SAASC,iBAAiB,EAAEC,kBAAkB,QAAQ,gBAAgB;AACtE,MAAMC,cAAc,GAAGA,CAACC,aAAa,EAAEC,OAAO,KAAK;EACjD,MAAMC,QAAQ,GAAG,GAAGF,aAAa,OAAO;EACxC,MAAMG,WAAW,GAAG,GAAGH,aAAa,MAAM;EAC1C,MAAMI,cAAc,GAAGJ,aAAa,KAAK,GAAG,GAAGL,kBAAkB,GAAGC,kBAAkB;EACtF,OAAOK,OAAO,KAAKG,cAAc,GAAG,eAAeD,WAAW,IAAI,GAAG,OAAOD,QAAQ,aAAaD,OAAO,GAAG;AAC7G,CAAC;AACD,OAAO,SAASI,gBAAgBA,CAACC,cAAc,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,KAAK,EAAE;EAC3F,MAAMC,WAAW,GAAGH,KAAK,CAACD,QAAQ,CAAC;EACnC,MAAMK,WAAW,GAAGF,KAAK,CAACD,QAAQ,CAAC;EACnC,MAAMI,kBAAkB,GAAGR,cAAc,GAAGM,WAAW,GAAGC,WAAW;EACrE,MAAME,oBAAoB,GAAGT,cAAc,GAAGO,WAAW,GAAGD,WAAW;EACvE,MAAMI,eAAe,GAAGV,cAAc,GAAGE,QAAQ,GAAGE,QAAQ;EAC5D,MAAMO,iBAAiB,GAAGX,cAAc,GAAGI,QAAQ,GAAGF,QAAQ;EAC9D,MAAMU,qBAAqB,GAAGZ,cAAc,GAAG,GAAG,GAAG,GAAG;EACxD,MAAMa,uBAAuB,GAAGb,cAAc,GAAG,GAAG,GAAG,GAAG;EAC1D,IAAI,CAACT,iBAAiB,CAACiB,kBAAkB,CAAC,EAAE;IAC1C,MAAM,IAAIM,KAAK,CAAC,iBAAiBrB,cAAc,CAACmB,qBAAqB,EAAEF,eAAe,CAAC,8DAA8DT,QAAQ,IAAI,CAAC;EACpK;EACA,IAAIO,kBAAkB,CAACO,IAAI,KAAKC,SAAS,EAAE;IACzC,MAAM,IAAIF,KAAK,CAAC,iBAAiBrB,cAAc,CAACmB,qBAAqB,EAAEF,eAAe,CAAC,6BAA6B,CAAC;EACvH;EACA,IAAInB,iBAAiB,CAACkB,oBAAoB,CAAC,IAAIjB,kBAAkB,CAACiB,oBAAoB,CAAC,EAAE;IACvF,MAAM,IAAIK,KAAK,CAAC,iBAAiBrB,cAAc,CAACoB,uBAAuB,EAAEF,iBAAiB,CAAC,iEAAiEV,QAAQ,IAAI,CAAC;EAC3K;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}